<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>My Website</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue-router@3"></script>
  <!-- After Vue scripts and before firebase-config.js -->
<!-- Replace these script tags in your index.html -->
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-storage-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>
  <style>
  	
  	
  /* Fade transition for backdrop */
  .fade-enter-active, .fade-leave-active {
    transition: opacity 0.3s ease;
  }
  .fade-enter, .fade-leave-to {
    opacity: 0;
  }

  /* Slide and fade transition for modal */
  .slide-fade-enter-active {
    transition: all 0.3s ease-out;
  }
  .slide-fade-leave-active {
    transition: all 0.2s cubic-bezier(1, 0.5, 0.8, 1);
  }
  .slide-fade-enter-from,
  .slide-fade-leave-to {
    transform: translateY(20px);
    opacity: 0;
  }

  /* Slide right transition for success message */
  .slide-right-enter-active {
    transition: all 0.3s ease-out;
  }
  .slide-right-leave-active {
    transition: all 0.2s cubic-bezier(1, 0.5, 0.8, 1);
  }
  .slide-right-enter-from {
    transform: translateX(20px);
    opacity: 0;
  }
  .slide-right-leave-to {
    transform: translateX(-20px);
    opacity: 0;
  }

  /* Shake animation for error message */
  .shake-enter-active {
    animation: shake 0.5s ease-in-out;
  }
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
  }

  /* Spinner animation */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  .fa-spinner {
    animation: spin 1s linear infinite;
  }

  /* Scale animation for success close */
  .modal-success-leave-active {
    transition: all 0.3s ease-in-out;
  }
  .modal-success-leave-to {
    transform: scale(0.95);
    opacity: 0;
  }

  /* Focus ring animation */
  input:focus {
    transition: all 0.2s ease-in-out;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5);
  }
  	
.nav-button {
    transition: all 0.2s ease;
    position: relative;
  }

  .nav-button:active {
    transform: scale(0.95);
  }

  .nav-button::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 2px;
    background-color: #3B82F6;
    transition: width 0.2s ease;
    border-radius: 2px;
  }

  .router-link-active::after {
    width: 24px; /* Slightly wider indicator */
  }

  .backdrop-blur-lg {
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
  }

  @media (hover: none) {
    .nav-button:active {
      opacity: 0.7;
    }
  }
  	
    body {
      background-color: #0D1B2A;
      color: white;
    }
    .page-transition {
      animation: fadeIn 0.3s ease-in;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    .error-message { color: #ff4444; }
    .success-message { color: #00C851; }
    .hidden { display: none; }
  </style>
</head>
<body class="font-roboto">
  <div id="app">
    <app-header v-if="$route.path === '/'"></app-header>
    <div class="p-4 page-transition">
      <router-view></router-view>
    </div>
    <nav-bar></nav-bar>
  </div>

  <!-- Firebase Config -->
  <script src="firebase-config.js"></script>

  <!-- Components -->
  <script src="components/Header.js"></script>
  <script src="components/NavBar.js"></script>
  
  <!-- Pages -->
  <script src="pages/Home.js"></script>
  <script src="pages/Explore.js"></script>
  <script src="pages/Live.js"></script>
  <script src="pages/Wallet.js"></script>
  
  <!-- Main App -->
  	<!-- Add these lines before the app.js script -->
<script src="components/SignInModal.js"></script>
<script src="components/SignUpModal.js"></script>
<script src="pages/Profile.js"></script>
  <script src="app.js"></script>
</body>
</html>

<!-- firebase-config.js -->
// firebase-config.js
// firebase-config.js
const firebaseConfig = {
  apiKey: "AIzaSyCe2Csia8NdqvAqdFGUv5h_UpVqqjtAsss",
  authDomain: "mima-games.firebaseapp.com",
  projectId: "mima-games",
  storageBucket: "mima-games.appspot.com",
  messagingSenderId: "557865286164",
  appId: "1:557865286164:web:8db785dcbf9ca39cfe0501"
};

// Initialize Firebase only if it hasn't been initialized yet
if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}

const auth = firebase.auth();
const storage = firebase.storage();
const firestore = firebase.firestore();

// Enable offline persistence for Firestore
firestore.enablePersistence()
  .catch((err) => {
    if (err.code == 'failed-precondition') {
      console.log('Multiple tabs open, persistence can only be enabled in one tab at a time.');
    } else if (err.code == 'unimplemented') {
      console.log('The current browser does not support persistence.');
    }
  });

// Make them globally available
window.auth = auth;
window.firebase = firebase;
window.storage = storage;
window.firestore = firestore;

<!-- components/Header.js -->
// components/Header.js
Vue.component('app-header', {
  template: `
    <header class="fixed w-full top-0 z-50">
      <div class="bg-[#0D1B2A]/80 backdrop-blur-lg shadow-lg border-b border-gray-700">
        <!-- Guest Header -->
        <div v-if="!user" class="container mx-auto px-4 py-3">
          <div class="flex justify-between items-center">
            <div class="flex items-center space-x-4">
              <h1 class="text-2xl font-bold text-white">My Website</h1>
            </div>
            <div class="flex items-center space-x-3">
              <button 
                @click="showSignIn"
                class="nav-button px-4 py-2 text-gray-300 hover:text-white transition-colors duration-200"
              >
                Sign In
              </button>
              <button 
                @click="showSignUp"
                class="nav-button bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors duration-200"
              >
                Sign Up
              </button>
            </div>
          </div>
        </div>

        <!-- Authenticated User Header -->
        <div v-else class="container mx-auto px-4 py-3">
          <div class="flex items-center justify-between">
            <!-- Left: Profile Image -->
            <div class="flex items-center space-x-3" v-click-outside="closeUserMenu">
              <div class="relative">
                <button 
                  @click="isUserMenuOpen = !isUserMenuOpen"
                  class="flex items-center space-x-2 group"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10 rounded-full" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <circle cx="12" cy="12" r="10" fill="#B0BEC5"/>
  <path d="M12 12c2.5 0 4.5 1.5 4.5 3.5v1.5H7.5v-1.5C7.5 13.5 9.5 12 12 12z" fill="#FFFFFF"/>
</svg>
                  <i class="fas fa-chevron-down text-gray-400 group-hover:text-white transition-colors duration-200"></i>
                </button>

                <!-- Profile Dropdown Menu -->
                <div 
                  v-show="isUserMenuOpen"
                  class="absolute left-0 mt-2 w-48 rounded-lg bg-[#1B2B3A] border border-gray-700 shadow-lg py-1 z-50"
                >
                  <div class="px-4 py-2 border-b border-gray-700">
                    <p class="text-sm font-medium text-white">{{ user.displayName || 'User' }}</p>
                    <p class="text-xs text-gray-400 truncate">{{ user.email }}</p>
                  </div>
            <router-link 
  to="/profile" 
  class="block px-4 py-2 text-sm text-gray-300 hover:bg-gray-700"
  @click="isUserMenuOpen = false"
>
  Profile
</router-link>
                  <a href="#" class="block px-4 py-2 text-sm text-gray-300 hover:bg-gray-700">Settings</a>
                  <button 
                    @click="signOut"
                    class="block w-full text-left px-4 py-2 text-sm text-red-400 hover:bg-gray-700"
                  >
                    Sign Out
                  </button>
                </div>
              </div>
            </div>

            <!-- Middle: Search Bar -->
            <div class="flex-1 max-w-2xl mx-4">
              <div class="relative">
                <input 
                  type="text"
                  v-model="searchQuery"
                  @focus="isSearchFocused = true"
                  @blur="isSearchFocused = false"
                  placeholder="Search..."
                  class="w-full bg-gray-800 border border-gray-700 rounded-lg pl-10 pr-4 py-2 text-gray-300 
                         placeholder-gray-500 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500
                         transition-all duration-200"
                >
                <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-500"></i>
                <div 
                  v-if="isSearchFocused && searchQuery"
                  class="absolute w-full mt-2 bg-[#1B2B3A] border border-gray-700 rounded-lg shadow-lg z-50"
                >
                  <div class="p-2">
                    <p class="text-sm text-gray-400">Searching for: {{ searchQuery }}</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Right: Icons -->
            <div class="flex items-center space-x-4">
              <!-- Scan Icon -->
              <button class="relative p-2 text-gray-400 hover:text-white focus:outline-none focus:text-white
                           transition-colors duration-200 group">
                <i class="fas fa-qrcode text-xl"></i>
                <span class="absolute -bottom-12 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-gray-800 
                           text-xs text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                  Scan
                </span>
              </button>

              <!-- Notifications Icon -->
              <div class="relative" v-click-outside="closeNotifications">
                <button 
                  @click="isNotificationsOpen = !isNotificationsOpen"
                  class="relative p-2 text-gray-400 hover:text-white focus:outline-none focus:text-white
                         transition-colors duration-200 group"
                >
                  <i class="fas fa-bell text-xl"></i>
                  <span v-if="notificationCount" 
                        class="absolute top-0 right-0 transform translate-x-1/2 -translate-y-1/2 
                               bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {{ notificationCount }}
                  </span>
                  <span class="absolute -bottom-12 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-gray-800 
                             text-xs text-white rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                    Notifications
                  </span>
                </button>

                <!-- Notifications Dropdown -->
                <div 
                  v-show="isNotificationsOpen"
                  class="absolute right-0 mt-2 w-80 rounded-lg bg-[#1B2B3A] border border-gray-700 shadow-lg py-1 z-50"
                >
                  <div class="px-4 py-2 border-b border-gray-700">
                    <p class="text-sm font-medium text-white">Notifications</p>
                  </div>
                  <div class="max-h-96 overflow-y-auto">
                    <div v-if="notifications.length === 0" class="px-4 py-3 text-sm text-gray-400">
                      No new notifications
                    </div>
                    <div 
                      v-for="notification in notifications" 
                      :key="notification.id"
                      class="px-4 py-3 hover:bg-gray-700 transition-colors duration-200"
                    >
                      <p class="text-sm text-white">{{ notification.message }}</p>
                      <p class="text-xs text-gray-400 mt-1">{{ notification.time }}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Auth Modals -->
      <sign-in-modal 
        :show="showSignInModal"
        @close="showSignInModal = false"
        @show-signup="showSignUp"
      ></sign-in-modal>

      <sign-up-modal
        :show="showSignUpModal"
        @close="showSignUpModal = false"
        @show-signin="showSignIn"
      ></sign-up-modal>
    </header>
  `,
  data() {
    return {
      user: null,
      showSignInModal: false,
      showSignUpModal: false,
      isUserMenuOpen: false,
      isNotificationsOpen: false,
      searchQuery: '',
      isSearchFocused: false,
      notificationCount: 3,
      notifications: [
        { id: 1, message: 'Welcome to the platform!', time: '2 minutes ago' },
        { id: 2, message: 'Your profile was updated successfully', time: '1 hour ago' },
        { id: 3, message: 'New feature available: Dark mode', time: '2 hours ago' }
      ]
    };
  },
  methods: {
    showSignIn() {
      this.showSignUpModal = false;
      this.showSignInModal = true;
    },
    showSignUp() {
      this.showSignInModal = false;
      this.showSignUpModal = true;
    },
    signOut() {
      auth.signOut().then(() => {
        this.user = null;
        this.isUserMenuOpen = false;
        this.$router.push('/');
      }).catch(error => {
        console.error('Sign out error:', error);
      });
    },
    closeUserMenu() {
      this.isUserMenuOpen = false;
    },
    closeNotifications() {
      this.isNotificationsOpen = false;
    }
  },
  created() {
    auth.onAuthStateChanged(user => {
      this.user = user;
    });
  },
  directives: {
    'click-outside': {
      bind(el, binding) {
        el.clickOutsideEvent = function(event) {
          if (!(el === event.target || el.contains(event.target))) {
            binding.value(event);
          }
        };
        document.addEventListener('click', el.clickOutsideEvent);
      },
      unbind(el) {
        document.removeEventListener('click', el.clickOutsideEvent);
      }
    }
  }
});

<!-- components/SignInModal.js -->
// components/SignInModal.js
// components/SignInModal.js
Vue.component('sign-in-modal', {
  template: `
    <transition name="modal">
      <div v-if="show" class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20">
          <!-- Background overlay with blur -->
          <transition name="fade">
            <div 
              class="fixed inset-0 bg-black/50 backdrop-blur-sm transition-all duration-300" 
              @click="closeModal"
            ></div>
          </transition>

          <!-- Modal panel -->
          <transition name="slide-fade">
            <div class="relative bg-[#1B2B3A] rounded-lg w-full max-w-md p-6 shadow-xl transform transition-all duration-300">
              <!-- Close button -->
              <div class="absolute top-4 right-4">
                <button 
                  @click="closeModal" 
                  class="text-gray-400 hover:text-white transition-all duration-200 hover:rotate-90 transform"
                  :disabled="loading"
                >
                  <i class="fas fa-times"></i>
                </button>
              </div>

              <h2 class="text-2xl font-bold text-white mb-6">Sign In</h2>

              <!-- Success message -->
              <transition name="slide-right">
                <div 
                  v-if="successMessage" 
                  class="mb-6 p-3 bg-green-500/20 border border-green-500 rounded-lg text-green-500 text-sm"
                >
                  <div class="flex items-center">
                    <i class="fas fa-check-circle mr-2"></i>
                    {{ successMessage }}
                  </div>
                </div>
              </transition>

              <!-- Error message -->
              <transition name="shake">
                <div 
                  v-if="error" 
                  class="mb-6 p-3 bg-red-500/20 border border-red-500 rounded-lg text-red-500 text-sm"
                >
                  <div class="flex items-center">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    {{ error }}
                  </div>
                </div>
              </transition>

              <form @submit.prevent="handleSignIn" class="space-y-4">
                <!-- Email field -->
                <div>
                  <label class="block text-gray-300 text-sm font-medium mb-2">
                    Email
                  </label>
                  <input 
                    type="email" 
                    v-model.trim="email"
                    :disabled="loading"
                    class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white 
                           transition-all duration-200
                           focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
                           disabled:opacity-50 disabled:cursor-not-allowed"
                    required
                  >
                </div>

                <!-- Password field -->
                <div>
                  <label class="block text-gray-300 text-sm font-medium mb-2">
                    Password
                  </label>
                  <div class="relative">
                    <input 
                      :type="showPassword ? 'text' : 'password'"
                      v-model="password"
                      :disabled="loading"
                      class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white 
                             transition-all duration-200
                             focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
                             disabled:opacity-50 disabled:cursor-not-allowed"
                      required
                    >
                    <button 
                      type="button"
                      @click="showPassword = !showPassword"
                      :disabled="loading"
                      class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white
                             transition-colors duration-200"
                    >
                      <i :class="[showPassword ? 'fas fa-eye-slash' : 'fas fa-eye', 'transition-transform duration-200 hover:scale-110']"></i>
                    </button>
                  </div>
                </div>

                <!-- Remember me and Forgot password -->
                <div class="flex items-center justify-between">
                  <label class="flex items-center">
                    <input 
                      type="checkbox" 
                      v-model="rememberMe"
                      :disabled="loading"
                      class="form-checkbox h-4 w-4 text-blue-600 transition duration-150 ease-in-out
                             disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                    <span class="ml-2 text-sm text-gray-300">Remember me</span>
                  </label>
                  <button 
                    type="button"
                    @click="handleForgotPassword"
                    :disabled="loading"
                    class="text-sm text-blue-500 hover:text-blue-400 transition-colors duration-200
                           disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Forgot password?
                  </button>
                </div>

                <!-- Sign in button -->
                <div class="pt-4">
                  <button 
                    type="submit"
                    :disabled="loading || !isValidForm"
                    class="w-full bg-blue-600 text-white font-medium py-2 px-4 rounded-lg
                           transform transition-all duration-200
                           hover:bg-blue-700 hover:scale-[1.02] 
                           active:scale-[0.98]
                           disabled:opacity-50 disabled:cursor-not-allowed
                           disabled:hover:scale-100 disabled:hover:bg-blue-600
                           focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-[#1B2B3A]"
                  >
                    <div class="flex items-center justify-center">
                      <i v-if="loading" class="fas fa-spinner fa-spin mr-2 transition-transform duration-1000"></i>
                      {{ loading ? 'Signing in...' : 'Sign In' }}
                    </div>
                  </button>
                </div>

                <!-- Divider -->
                <div class="relative py-4">
                  <div class="absolute inset-0 flex items-center">
                    <div class="w-full border-t border-gray-600"></div>
                  </div>
                  <div class="relative flex justify-center text-sm">
                    <span class="px-2 bg-[#1B2B3A] text-gray-400">Or continue with</span>
                  </div>
                </div>

                <!-- Google sign in -->
                <button 
                  type="button"
                  @click="signInWithGoogle"
                  :disabled="loading"
                  class="w-full bg-white text-gray-900 font-medium py-2 px-4 rounded-lg
                         transform transition-all duration-200
                         hover:bg-gray-100 hover:scale-[1.02]
                         active:scale-[0.98]
                         disabled:opacity-50 disabled:cursor-not-allowed
                         disabled:hover:scale-100 disabled:hover:bg-white
                         focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-[#1B2B3A]"
                >
                  <div class="flex items-center justify-center">
                    <img 
                      src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" 
                      class="w-5 h-5 mr-2 transition-transform duration-200"
                      alt="Google logo"
                    >
                    {{ googleLoading ? 'Connecting...' : 'Google' }}
                  </div>
                </button>

                <!-- Sign up link -->
                <div class="text-center mt-4">
                  <span class="text-gray-400">Don't have an account?</span>
                  <button 
                    type="button"
                    @click="switchToSignUp"
                    :disabled="loading"
                    class="ml-1 text-blue-500 hover:text-blue-400 transition-colors duration-200
                           disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Sign up
                  </button>
                </div>
              </form>
            </div>
          </transition>
        </div>
      </div>
    </transition>
  `,
  props: {
    show: {
      type: Boolean,
      required: true
    }
  },
  data() {
    return {
      email: '',
      password: '',
      rememberMe: false,
      showPassword: false,
      loading: false,
      googleLoading: false,
      error: null,
      successMessage: null,
      closeTimeout: null
    };
  },
  computed: {
    isValidForm() {
      return this.email.length > 0 && this.password.length > 0;
    }
  },
  methods: {
    async handleSignIn() {
      if (!this.isValidForm) return;
      
      this.loading = true;
      this.error = null;
      this.successMessage = null;

      try {
        if (!firebase.apps.length) {
          throw new Error('Firebase not initialized');
        }

        const persistence = this.rememberMe 
          ? firebase.auth.Auth.Persistence.LOCAL
          : firebase.auth.Auth.Persistence.SESSION;
        
        await firebase.auth().setPersistence(persistence);
        const userCredential = await firebase.auth().signInWithEmailAndPassword(this.email, this.password);
        
        this.successMessage = 'Successfully signed in! Redirecting...';
        
        this.closeTimeout = setTimeout(() => {
          this.closeModal();
          this.$router.push('/');
        }, 1500);
        
      } catch (error) {
        console.error('Sign in error:', error);
        
        switch (error.code) {
          case 'auth/user-not-found':
            this.error = 'No account found with this email address';
            break;
          case 'auth/wrong-password':
            this.error = 'Incorrect password';
            break;
          case 'auth/too-many-requests':
            this.error = 'Too many failed attempts. Please try again later';
            break;
          case 'auth/user-disabled':
            this.error = 'This account has been disabled';
            break;
          default:
            this.error = `Failed to sign in: ${error.message}`;
        }
      } finally {
        this.loading = false;
      }
    },

    async signInWithGoogle() {
      if (this.loading || this.googleLoading) return;
      
      this.googleLoading = true;
      this.error = null;
      this.successMessage = null;

      try {
        const provider = new firebase.auth.GoogleAuthProvider();
        const result = await firebase.auth().signInWithPopup(provider);
        
        this.successMessage = 'Successfully signed in with Google! Redirecting...';
        
        this.closeTimeout = setTimeout(() => {
          this.closeModal();
          this.$router.push('/');
        }, 1500);
        
      } catch (error) {
        console.error('Google sign in error:', error);
        
        if (error.code !== 'auth/popup-closed-by-user') {
          this.error = `Failed to sign in with Google: ${error.message}`;
        }
      } finally {
        this.googleLoading = false;
      }
    },

    async handleForgotPassword() {
      if (!this.email) {
        this.error = 'Please enter your email address';
        return;
      }

      this.loading = true;
      this.error = null;

      try {
        await firebase.auth().sendPasswordResetEmail(this.email);
        this.successMessage = 'Password reset email sent. Please check your inbox';
        
        this.closeTimeout = setTimeout(() => {
          this.closeModal();
        }, 3000);
        
      } catch (error) {
        console.error('Password reset error:', error);
        if (error.code === 'auth/user-not-found') {
          this.error = 'No account found with this email address';
        } else {
          this.error = `Failed to send reset email: ${error.message}`;
        }
      } finally {
        this.loading = false;
      }
    },

    switchToSignUp() {
      this.clearTimeouts();
      this.$emit('close');
      this.$emit('show-signup');
    },

    closeModal() {
      if (this.loading || this.googleLoading) return;
      
      this.clearTimeouts();
      this.email = '';
      this.password = '';
      this.error = null;
      this.successMessage = null;
      this.$emit('close');
    },

    clearTimeouts() {
      if (this.closeTimeout) {
        clearTimeout(this.closeTimeout);
        this.closeTimeout = null;
      }
    }
  },
  beforeDestroy() {
    this.clearTimeouts();
  },
  watch: {
    show(newVal) {
      if (!newVal) {
        this.clearTimeouts();
      }
    }
  }
});

<!-- components/SignUpModal.js -->
Vue.component('sign-up-modal', {
  template: `
    <div v-if="show" class="fixed inset-0 z-50 overflow-y-auto">
      <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20">
        <!-- Background overlay -->
        <div class="fixed inset-0 bg-black/50 backdrop-blur-sm" @click="closeModal"></div>

        <!-- Modal panel -->
        <div class="relative bg-[#1B2B3A] rounded-lg w-full max-w-md p-6 shadow-xl">
          <!-- Close button -->
          <div class="absolute top-4 right-4">
            <button 
              @click="closeModal" 
              class="text-gray-400 hover:text-white transition-colors"
              :disabled="loading"
            >
              <i class="fas fa-times"></i>
            </button>
          </div>

          <h2 class="text-2xl font-bold text-white mb-6">Create Account</h2>

          <!-- Error message -->
          <div 
            v-if="error" 
            class="mb-6 p-3 bg-red-500/20 border border-red-500 rounded-lg text-red-500 text-sm"
          >
            <div class="flex items-center">
              <i class="fas fa-exclamation-circle mr-2"></i>
              {{ error }}
            </div>
          </div>

          <form @submit.prevent="handleSignUp">
            <div class="space-y-4">
              <!-- Name field -->
              <div>
                <label class="block text-gray-300 text-sm font-medium mb-2">
                  Full Name
                </label>
                <input 
                  type="text" 
                  v-model.trim="name"
                  :disabled="loading"
                  class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white 
                         focus:outline-none focus:border-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                  required
                >
              </div>

              <!-- Email field -->
              <div>
                <label class="block text-gray-300 text-sm font-medium mb-2">
                  Email
                </label>
                <input 
                  type="email" 
                  v-model.trim="email"
                  :disabled="loading"
                  class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white 
                         focus:outline-none focus:border-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                  required
                >
              </div>

              <!-- Password field -->
              <div>
                <label class="block text-gray-300 text-sm font-medium mb-2">
                  Password
                </label>
                <div class="relative">
                  <input 
                    :type="showPassword ? 'text' : 'password'"
                    v-model="password"
                    :disabled="loading"
                    class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white 
                           focus:outline-none focus:border-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    required
                  >
                  <button 
                    type="button"
                    @click="showPassword = !showPassword"
                    :disabled="loading"
                    class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white"
                  >
                    <i :class="showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'"></i>
                  </button>
                </div>
                <!-- Password strength indicator -->
                <div class="mt-2">
                  <div class="flex space-x-1">
                    <div 
                      v-for="(level, index) in 4" 
                      :key="index"
                      class="h-1 w-1/4 rounded-full transition-colors duration-200"
                      :class="[
                        index < passwordStrength ? 
                          passwordStrength === 1 ? 'bg-red-500' :
                          passwordStrength === 2 ? 'bg-yellow-500' :
                          passwordStrength === 3 ? 'bg-green-500' :
                          'bg-blue-500' : 'bg-gray-600'
                      ]"
                    ></div>
                  </div>
                  <p class="text-xs mt-1" :class="[
                    passwordStrength === 0 ? 'text-gray-400' :
                    passwordStrength === 1 ? 'text-red-500' :
                    passwordStrength === 2 ? 'text-yellow-500' :
                    passwordStrength === 3 ? 'text-green-500' :
                    'text-blue-500'
                  ]">
                    {{ passwordStrengthText }}
                  </p>
                </div>
              </div>

              <!-- Confirm Password field -->
              <div>
                <label class="block text-gray-300 text-sm font-medium mb-2">
                  Confirm Password 
                  // SignUpModal.js (continued)
                </label>
                <div class="relative">
                  <input 
                    :type="showConfirmPassword ? 'text' : 'password'"
                    v-model="confirmPassword"
                    :disabled="loading"
                    class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white 
                           focus:outline-none focus:border-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    required
                  >
                  <button 
                    type="button"
                    @click="showConfirmPassword = !showConfirmPassword"
                    :disabled="loading"
                    class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white"
                  >
                    <i :class="showConfirmPassword ? 'fas fa-eye-slash' : 'fas fa-eye'"></i>
                  </button>
                </div>
                <!-- Password match indicator -->
                <p v-if="confirmPassword" class="text-xs mt-1" :class="passwordsMatch ? 'text-green-500' : 'text-red-500'">
                  <i :class="passwordsMatch ? 'fas fa-check' : 'fas fa-times'" class="mr-1"></i>
                  {{ passwordsMatch ? 'Passwords match' : 'Passwords do not match' }}
                </p>
              </div>

              <!-- Terms acceptance -->
              <div class="flex items-start">
                <div class="flex items-center h-5">
                  <input
                    type="checkbox"
                    v-model="acceptTerms"
                    :disabled="loading"
                    class="form-checkbox h-4 w-4 text-blue-600 transition duration-150 ease-in-out"
                    required
                  >
                </div>
                <div class="ml-2 text-sm">
                  <label class="text-gray-300">
                    I accept the 
                    <a href="#" class="text-blue-500 hover:text-blue-400">Terms of Service</a>
                    and
                    <a href="#" class="text-blue-500 hover:text-blue-400">Privacy Policy</a>
                  </label>
                </div>
              </div>

              <!-- Sign up button -->
              <div class="pt-4">
                <button 
                  type="submit"
                  :disabled="loading || !isValidForm"
                  class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg
                         transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  <i v-if="loading" class="fas fa-spinner fa-spin mr-2"></i>
                  {{ loading ? 'Creating Account...' : 'Create Account' }}
                </button>
              </div>

              <!-- Sign in link -->
              <div class="text-center mt-4">
                <span class="text-gray-400">Already have an account?</span>
                <button 
                  type="button"
                  @click="switchToSignIn"
                  :disabled="loading"
                  class="ml-1 text-blue-500 hover:text-blue-400 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Sign in
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  `,
  props: {
    show: {
      type: Boolean,
      required: true
    }
  },
  data() {
    return {
      name: '',
      email: '',
      password: '',
      confirmPassword: '',
      acceptTerms: false,
      showPassword: false,
      showConfirmPassword: false,
      loading: false,
      error: null
    };
  },
  computed: {
    isValidForm() {
      return (
        this.name.length > 0 &&
        this.email.length > 0 &&
        this.password.length >= 8 &&
        this.passwordsMatch &&
        this.acceptTerms
      );
    },
    passwordsMatch() {
      return this.password === this.confirmPassword && this.confirmPassword.length > 0;
    },
    passwordStrength() {
      const password = this.password;
      if (!password) return 0;
      
      let strength = 0;
      
      // Length check
      if (password.length >= 8) strength++;
      
      // Contains number
      if (/\d/.test(password)) strength++;
      
      // Contains lowercase and uppercase
      if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
      
      // Contains special character
      if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;
      
      return strength;
    },
    passwordStrengthText() {
      switch (this.passwordStrength) {
        case 0: return 'Enter password';
        case 1: return 'Weak';
        case 2: return 'Fair';
        case 3: return 'Good';
        case 4: return 'Strong';
        default: return '';
      }
    }
  },
  methods: {
    async handleSignUp() {
      if (!this.isValidForm) return;
      
      this.loading = true;
      this.error = null;

      try {
        // Create user account
        const userCredential = await auth.createUserWithEmailAndPassword(
          this.email,
          this.password
        );

        // Update user profile
        await userCredential.user.updateProfile({
          displayName: this.name
        });

        // Additional user data can be stored in Firestore here if needed
        
        this.closeModal();
        this.$router.push('/');
      } catch (error) {
        switch (error.code) {
          case 'auth/email-already-in-use':
            this.error = 'An account with this email already exists';
            break;
          case 'auth/invalid-email':
            this.error = 'Please enter a valid email address';
            break;
          case 'auth/operation-not-allowed':
            this.error = 'Email/password accounts are not enabled. Please contact support';
            break;
          case 'auth/weak-password':
            this.error = 'Please choose a stronger password';
            break;
          default:
            this.error = 'Failed to create account. Please try again';
        }
      } finally {
        this.loading = false;
      }
    },

    validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    },

    switchToSignIn() {
      this.$emit('close');
      this.$emit('show-signin');
    },

    closeModal() {
      if (this.loading) return;
      this.name = '';
      this.email = '';
      this.password = '';
      this.confirmPassword = '';
      this.acceptTerms = false;
      this.error = null;
      this.$emit('close');
    }
  },
  watch: {
    show(newVal) {
      if (newVal) {
        // Reset form when modal is opened
        this.name = '';
        this.email = '';
        this.password = '';
        this.confirmPassword = '';
        this.acceptTerms = false;
        this.error = null;
      }
    }
  }
}); 

<!-- components/NavBar.js -->
Vue.component('nav-bar', {
  data() {
    return {
      activeRoute: '/'
    };
  },
  watch: {
    '$route.path'(newPath) {
      this.activeRoute = newPath;
    }
  },
  mounted() {
    this.activeRoute = this.$route.path;
  },
  template: `
    <nav class="fixed bottom-0 left-0 right-0 bg-[#0D1B2A] border-t border-gray-800">
      <div class="flex justify-around items-center h-16"> <!-- Simple fixed height container -->
        <router-link 
          to="/" 
          class="flex flex-col items-center justify-center w-16 py-2"
          :class="{'text-blue-500': activeRoute === '/', 'text-gray-400': activeRoute !== '/'}"
        >
          <i class="material-icons text-2xl">home</i>
          <span class="text-xs mt-0.5">Home</span>
        </router-link>

        <router-link 
          to="/explore" 
          class="flex flex-col items-center justify-center w-16 py-2"
          :class="{'text-blue-500': activeRoute === '/explore', 'text-gray-400': activeRoute !== '/explore'}"
        >
          <i class="material-icons text-2xl">search</i>
          <span class="text-xs mt-0.5">Explore</span>
        </router-link>

        <router-link 
          to="/live" 
          class="flex flex-col items-center justify-center w-16 py-2"
          :class="{'text-blue-500': activeRoute === '/live', 'text-gray-400': activeRoute !== '/live'}"
        >
          <i class="material-icons text-2xl">live_tv</i>
          <span class="text-xs mt-0.5">Live</span>
        </router-link>

        <router-link 
          to="/wallet" 
          class="flex flex-col items-center justify-center w-16 py-2"
          :class="{'text-blue-500': activeRoute === '/wallet', 'text-gray-400': activeRoute !== '/wallet'}"
        >
          <i class="material-icons text-2xl">account_balance_wallet</i>
          <span class="text-xs mt-0.5">Wallet</span>
        </router-link>
      </div>
    </nav>
  `
});

<!-- pages/Home.js -->
const Home = {
  template: `
    <div>
      <h2 class="text-xl font-bold mb-4">Welcome to My Website</h2>
      <div class="slides overflow-hidden relative w-full h-64">
        <div class="slide w-full h-full absolute">
          <img alt="A placeholder image of a scenic landscape" class="w-full h-full object-cover" height="400" src="https://placehold.co/600x400?text=Scenic+Landscape" width="600"/>
        </div>
        <div class="slide w-full h-full absolute">
          <img alt="A placeholder image of a city skyline" class="w-full h-full object-cover" height="400" src="https://placehold.co/600x400?text=City+Skyline" width="600"/>
        </div>
        <div class="slide w-full h-full absolute">
          <img alt="A placeholder image of a mountain range" class="w-full h-full object-cover" height="400" src="https://placehold.co/600x400?text=Mountain+Range" width="600"/>
        </div>
      </div>
      <p class="mt-4">This is the homepage of your website. Use the navigation bar below to explore other sections.</p>
    </div>
  `
};

<!-- pages/Explore.js -->
const Explore = {
  template: `
    <div class="container mx-auto pb-4">
      <!-- Your existing Explore page content -->
    </div>
  `
};

<!-- pages/Live.js -->
const Live = {
  template: `
    <div>
      <h2 class="text-xl font-bold mb-4">Live</h2>
      <div class="flex flex-col gap-4">
        <div class="live-item bg-gray-800 p-4 rounded">
          <h3 class="text-lg font-bold">Live Event 1</h3>
          <p>Details about live event 1.</p>
        </div>
        <div class="live-item bg-gray-800 p-4 rounded">
          <h3 class="text-lg font-bold">Live Event 2</h3>
          <p>Details about live event 2.</p>
        </div>
        <div class="live-item bg-gray-800 p-4 rounded">
          <h3 class="text-lg font-bold">Live Event 3</h3>
          <p>Details about live event 3.</p>
        </div>
      </div>
    </div>
  `
};

<!-- pages/Profile.js -->
const Profile = {
  template: `
    <div class="min-h-screen pt-20 pb-8 px-4">
      <div v-if="user" class="max-w-4xl mx-auto">
        <!-- Profile Header -->
        <div class="relative mb-8">
          <!-- Cover Image -->
          <div class="h-48 md:h-64 rounded-xl overflow-hidden relative bg-gradient-to-r from-blue-600 to-purple-600">
            <img 
              :src="coverPhotoURL || '/default-cover.jpg'" 
              class="w-full h-full object-cover"
              @error="handleCoverImageError"
            >
            <div class="absolute inset-0 bg-black bg-opacity-30"></div>
            <button 
              @click="$refs.coverInput.click()"
              class="absolute bottom-4 right-4 bg-black bg-opacity-50 hover:bg-opacity-70 text-white px-4 py-2 rounded-lg 
                     transition duration-200 flex items-center space-x-2"
            >
              <i class="fas fa-camera"></i>
              <span>Change Cover</span>
            </button>
            <input 
              ref="coverInput"
              type="file" 
              @change="handleCoverUpload" 
              accept="image/*" 
              class="hidden"
            >
          </div>

          <!-- Profile Image -->
          <div class="absolute -bottom-16 left-8">
            <div class="relative group">
              <div class="w-32 h-32 rounded-full overflow-hidden border-4 border-[#1B2B3A] bg-[#1B2B3A]">
                <img 
                  :src="profileImageUrl" 
                  :alt="user.displayName || 'User'"
                  class="w-full h-full object-cover"
                  @error="handleProfileImageError"
                >
              </div>
              <button 
                @click="$refs.profileInput.click()"
                class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-full 
                       opacity-0 group-hover:opacity-100 transition-opacity duration-200"
              >
                <i class="fas fa-camera text-white"></i>
              </button>
              <input 
                ref="profileInput"
                type="file" 
                @change="handleProfileUpload" 
                accept="image/*" 
                class="hidden"
              >
            </div>
          </div>
        </div>

        <!-- Profile Content -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <!-- Left Column: Profile Info -->
          <div class="md:col-span-2">
            <div class="bg-[#1B2B3A] rounded-xl shadow-xl p-6">
              <!-- Status Message -->
              <transition name="fade">
                <div 
                  v-if="message.text" 
                  :class="['mb-4 p-4 rounded-lg', 
                    message.type === 'error' ? 'bg-red-500/10 text-red-500' : 'bg-green-500/10 text-green-500']"
                >
                  <div class="flex items-center space-x-2">
                    <i :class="['fas', message.type === 'error' ? 'fa-exclamation-circle' : 'fa-check-circle']"></i>
                    <span>{{ message.text }}</span>
                  </div>
                </div>
              </transition>

              <!-- Profile Form -->
              <form @submit.prevent="updateProfile" class="space-y-6">
                <!-- Display Name -->
                <div>
                  <label class="block text-gray-300 text-sm font-medium mb-2">Display Name</label>
                  <input 
                    type="text" 
                    v-model="formData.displayName"
                    class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white 
                           focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500
                           transition-all duration-200"
                    placeholder="Enter your name"
                  >
                </div>

                <!-- Bio -->
                <div>
                  <label class="block text-gray-300 text-sm font-medium mb-2">Bio</label>
                  <textarea 
                    v-model="formData.bio"
                    rows="3"
                    class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white 
                           focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500
                           transition-all duration-200 resize-none"
                    placeholder="Tell us about yourself"
                  ></textarea>
                </div>

                <!-- Email -->
                <div>
                  <label class="block text-gray-300 text-sm font-medium mb-2">Email</label>
                  <input 
                    type="email" 
                    v-model="formData.email"
                    disabled
                    class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg text-gray-400"
                  >
                </div>

                <!-- Social Links -->
                <div>
                  <label class="block text-gray-300 text-sm font-medium mb-2">Social Links</label>
                  <div class="space-y-3">
                    <div class="flex items-center space-x-3">
                      <i class="fab fa-twitter text-gray-400 w-6"></i>
                      <input 
                        type="text" 
                        v-model="formData.social.twitter"
                        class="flex-1 px-4 py-2 bg-gray-800/50 border border-gray-700 rounded-lg text-white 
                               focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500
                               transition-all duration-200"
                        placeholder="Twitter username"
                      >
                    </div>
                    <div class="flex items-center space-x-3">
                      <i class="fab fa-instagram text-gray-400 w-6"></i>
                      <input 
                        type="text" 
                        v-model="formData.social.instagram"
                        class="flex-1 px-4 py-2 bg-gray-800/50 border border-gray-700 rounded-lg text-white 
                               focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500
                               transition-all duration-200"
                        placeholder="Instagram username"
                      >
                    </div>
                  </div>
                </div>

                <!-- Submit Button -->
                <div class="flex justify-end">
                  <button 
                    type="submit"
                    :disabled="loading"
                    class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg
                           transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed
                           flex items-center space-x-2"
                  >
                    <i v-if="loading" class="fas fa-spinner fa-spin"></i>
                    <span>{{ loading ? 'Updating...' : 'Update Profile' }}</span>
                  </button>
                </div>
              </form>
            </div>
          </div>

          <!-- Right Column: Stats & Additional Info -->
          <div class="space-y-6">
            <!-- Stats Card -->
            <div class="bg-[#1B2B3A] rounded-xl shadow-xl p-6">
              <h3 class="text-lg font-semibold text-white mb-4">Stats</h3>
              <div class="space-y-4">
                <div class="flex items-center justify-between">
                  <span class="text-gray-400">Followers</span>
                  <span class="text-white font-medium">{{ stats.followers }}</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-gray-400">Following</span>
                  <span class="text-white font-medium">{{ stats.following }}</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-gray-400">Posts</span>
                  <span class="text-white font-medium">{{ stats.posts }}</span>
                </div>
              </div>
            </div>

            <!-- Account Info -->
            <div class="bg-[#1B2B3A] rounded-xl shadow-xl p-6">
              <h3 class="text-lg font-semibold text-white mb-4">Account Info</h3>
              <div class="space-y-4">
                <div>
                  <span class="text-gray-400 block text-sm">Member since</span>
                  <span class="text-white">{{ formatDate(user.metadata.creationTime) }}</span>
                </div>
                <div>
                  <span class="text-gray-400 block text-sm">Last sign in</span>
                  <span class="text-white">{{ formatDate(user.metadata.lastSignInTime) }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
  
  data() {
    return {
      user: null,
      loading: false,
      coverPhotoURL: null,
      profileImageUrl: '',
      formData: {
        displayName: '',
        email: '',
        bio: '',
        social: {
          twitter: '',
          instagram: ''
        }
      },
      message: {
        text: '',
        type: 'success'
      },
      stats: {
        followers: 0,
        following: 0,
        posts: 0
      }
    };
  },
  created() {
    this.initializeUser();
    this.loadUserData();
  },
  methods: {
    async initializeUser() {
      const user = firebase.auth().currentUser;
      if (user) {
        this.user = user;
        this.profileImageUrl = user.photoURL || '/default-avatar.png';
        this.formData.displayName = user.displayName || '';
        this.formData.email = user.email || '';
      } else {
        this.$router.push('/');
      }
    },

    async loadUserData() {
      if (!this.user) return;

      try {
        const userDoc = await firestore.collection('users').doc(this.user.uid).get();
        if (userDoc.exists) {
          const userData = userDoc.data();
          this.formData.bio = userData.bio || '';
          this.formData.social = userData.social || { twitter: '', instagram: '' };
          this.coverPhotoURL = userData.coverPhotoURL;
          this.stats = userData.stats || { followers: 0, following: 0, posts: 0 };
        }
      } catch (error) {
        console.error('Error loading user data:', error);
        this.message = { text: 'Failed to load user data', type: 'error' };
      }
    },

    formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    },

    handleProfileImageError(e) {
      e.target.src = '/default-avatar.png';
      this.profileImageUrl = '/default-avatar.png';
    },

    handleCoverImageError(e) {
      e.target.src = '/default-cover.jpg';
    },

    async handleProfileUpload(event) {
  const file = event.target.files[0];
  if (!file) return;

  try {
    // Validate file type and size
    if (!file.type.match(/image\/(jpeg|png|gif)/i)) {
      throw new Error('Please select a valid image file (JPEG, PNG, or GIF)');
    }
    if (file.size > 5 * 1024 * 1024) {
      throw new Error('Image must be smaller than 5MB');
    }

    this.loading = true;
    this.message = { text: 'Uploading image...', type: 'success' };

    // Create a storage reference
    const storageRef = storage.ref();
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(7);
    const fileRef = storageRef.child(`profile-images/${this.user.uid}/${timestamp}_${random}`);

    // Create file metadata including the content type
    const metadata = {
      contentType: file.type,
      customMetadata: {
        'uploaded-by': this.user.uid,
        'original-name': file.name
      }
    };

    try {
      // Try uploading with putString
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const dataUrl = e.target.result;
          const uploadTask = await fileRef.putString(dataUrl, 'data_url', metadata);
          const downloadURL = await uploadTask.ref.getDownloadURL();

          // Update user profile
          await this.user.updateProfile({
            photoURL: downloadURL
          });

          // Update Firestore document
          await firestore.collection('users').doc(this.user.uid).set({
            photoURL: downloadURL,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
          }, { merge: true });

          this.profileImageUrl = downloadURL;
          this.message = { text: 'Profile picture updated successfully', type: 'success' };
        } catch (uploadError) {
          console.error('Upload error:', uploadError);
          throw uploadError;
        }
      };

      reader.onerror = (error) => {
        throw error;
      };

      // Read the file as a data URL
      reader.readAsDataURL(file);

    } catch (error) {
      throw error;
    }

  } catch (error) {
    console.error('Error:', error);
    this.message = { 
      text: error.message || 'Failed to upload image. Please try again.',
      type: 'error'
    };
    this.profileImageUrl = this.DEFAULT_AVATAR;
  } finally {
    this.loading = false;
    event.target.value = '';
  }
},

async handleCoverUpload(event) {
  const file = event.target.files[0];
  if (!file) return;

  try {
    if (!file.type.match(/image\/(jpeg|png|gif)/i)) {
      throw new Error('Please select a valid image file (JPEG, PNG, or GIF)');
    }
    if (file.size > 5 * 1024 * 1024) {
      throw new Error('Image must be smaller than 5MB');
    }

    this.loading = true;
    this.message = { text: 'Uploading cover image...', type: 'success' };

    const storageRef = storage.ref();
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(7);
    const fileRef = storageRef.child(`cover-images/${this.user.uid}/${timestamp}_${random}`);

    const metadata = {
      contentType: file.type,
      customMetadata: {
        'uploaded-by': this.user.uid,
        'original-name': file.name
      }
    };

    try {
      // Try uploading with putString
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const dataUrl = e.target.result;
          const uploadTask = await fileRef.putString(dataUrl, 'data_url', metadata);
          const downloadURL = await uploadTask.ref.getDownloadURL();

          // Update Firestore document
          await firestore.collection('users').doc(this.user.uid).update({
            coverPhotoURL: downloadURL,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
          });

          this.coverPhotoURL = downloadURL;
          this.message = { text: 'Cover photo updated successfully', type: 'success' };
        } catch (uploadError) {
          console.error('Upload error:', uploadError);
          throw uploadError;
        }
      };

      reader.onerror = (error) => {
        throw error;
      };

      // Read the file as a data URL
      reader.readAsDataURL(file);

    } catch (error) {
      throw error;
    }

  } catch (error) {
    console.error('Error:', error);
    this.message = { 
      text: error.message || 'Failed to upload cover image. Please try again.',
      type: 'error'
    };
    this.coverPhotoURL = this.DEFAULT_COVER;
  } finally {
    this.loading = false;
    event.target.value = '';
  }
}


<!-- pages/Wallet.js -->
const Wallet = {
  template: `
    <div>
      <h2 class="text-xl font-bold mb-4">Wallet</h2>
      <div class="wallet-info bg-gray-800 p-4 rounded">
        <h3 class="text-lg font-bold">Balance: $1000</h3>
        <p>Details about your wallet balance and transactions.</p>
      </div>
      <div class="mt-4">
        <button class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Add Funds</button>
        <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded ml-2">Withdraw</button>
      </div>
    </div>
  `
};

<!-- app.js -->
// app.js



firebase.auth().onAuthStateChanged((user) => {
  console.log('Auth state changed:', user ? 'User logged in' : 'User logged out');
});

const routes = [
  { path: '/', component: Home },
  { path: '/explore', component: Explore },
  { path: '/live', component: Live },
  { path: '/wallet', component: Wallet },
  { path: '/profile', component: Profile }
  
  
];


const router = new VueRouter({
  routes
});

// Add navigation guards
router.beforeEach((to, from, next) => {
  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);
  const currentUser = firebase.auth().currentUser;

  if (requiresAuth && !currentUser) {
    next('/');
  } else {
    next();
  }
});

new Vue({
  el: '#app',
  router,
  data: {
    currentUser: null,
    isLoading: true
  },
  created() {
    // Check if Firebase is properly initialized
    if (!firebase.apps.length) {
      console.error('Firebase not initialized');
    }

    // Set up authentication state observer
    firebase.auth().onAuthStateChanged((user) => {
      this.currentUser = user;
      this.isLoading = false;
      console.log('Auth state changed in Vue instance:', user ? 'User logged in' : 'User logged out');
    });
  },
  methods: {
    async signOut() {
      try {
        await firebase.auth().signOut();
        this.$router.push('/');
      } catch (error) {
        console.error('Sign out error:', error);
      }
    }
  }
});